// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id              String   @id @map("_id") @db.String()
  username        String   @db.String()
  email           String   @unique @db.String()
  password        String   @db.String()
  gender          Boolean  @db.Bool()
  profile_picture String?  @db.String()
  role            Role     @default(USER)
  is_delete       Boolean  @default(false) @db.Bool()
  created_at      DateTime @default(now())
  updated_at      DateTime @updatedAt
  favorites       Favorite[]

  @@map("users")
}

enum Role {
  USER
  ADMIN
}

model Ingredient {
  id         String   @id @map("_id") @db.String
  name       String   @db.String()
  unit       String   @db.String()
  is_delete  Boolean  @default(false) @db.Bool()
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  @@map("ingredients")
}

model Category {
  id          String   @id @map("_id") @db.String()
  name        String   @db.String()
  description String   @db.String()
  recipes     Recipe[]
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt

  @@map("categories")
}

model Video {
  id         String   @id @map("_id") @db.String()
  name       String   @db.String()
  link       String   @db.String()
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  recipe     Recipe?

  @@map("videos")
}

model Recipe {
  id             String   @id @map("_id") @db.String()
  descriptions   String   @db.String()
  cuisine        String   @db.String()
  instructions   String   @db.String()
  recipe_picture String   @db.String()
  category_id    String   @unique @db.String()
  video_id       String   @unique @db.String()
  created_at     DateTime @default(now())
  updated_at     DateTime @updatedAt
  category       Category @relation(fields: [category_id], references: [id])
  video          Video    @relation(fields: [video_id], references: [id])
  favorites      Favorite[]

  @@map("recipes")
}

model Favorite {
  id         String   @id @map("_id") @db.String()
  user_id    String
  recipe_id  String
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  user       User     @relation(fields: [user_id], references: [id])
  recipe     Recipe   @relation(fields: [recipe_id], references: [id])

  @@map("favorites")
}