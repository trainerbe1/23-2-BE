// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id              String     @id @map("_id") @db.String()
  username        String     @db.String()
  email           String     @unique @db.String()
  password        String     @db.String()
  gender          Boolean    @db.Bool()
  profile_picture String?    @db.String()
  role            Role       @default(USER)
  is_delete       Boolean    @default(false) @db.Bool()
  created_at      DateTime   @default(now())
  updated_at      DateTime   @updatedAt()
  favorites       Favorite[]
  groceries       Grocery[]
  mealPlans       MealPlan[]

  @@map("users")
}

model Admin {
  id              String     @id @map("_id") @db.String()
  username        String     @db.String()
  email           String     @unique @db.String()
  password        String     @db.String()
  created_at      DateTime   @default(now())
  updated_at      DateTime   @updatedAt()
  
  @@map("admin")
}

enum Role {
  USER
  ADMIN
}

model Ingredient {
  id         String   @id @map("_id") @db.String
  name       String   @db.String()
  unit       String   @db.String()
  quantity   Int      @db.Int()
  is_delete  Boolean  @default(false) @db.Bool()
  recipe_id  String[] @db.String()
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt()

  recipes Recipe[] @relation(fields: [recipe_id], references: [id])

  @@map("ingredients")
}

model Category {
  id           String   @id @map("_id") @db.String()
  name         String   @db.String()
  descriptions String   @db.String()
  recipes      Recipe[]
  created_at   DateTime @default(now())
  updated_at   DateTime @updatedAt()

  @@map("categories")
}

model Video {
  id         String      @id @map("_id") @db.String()
  name       String      @db.String()
  created_at DateTime    @default(now())
  updated_at DateTime    @updatedAt()
  recipe     Recipe?
  VideoItem  VideoItem[]

  @@map("videos")
}

model VideoItem {
  id       String @id @map("_id") @db.String()
  video_id String @db.String()
  link     String @db.String()

  video Video @relation(fields: [video_id], references: [id])

  @@map("videoItems")
}

model Recipe {
  id             String     @id @map("_id") @db.String()
  name           String     @db.String()
  descriptions   String     @db.String()
  cuisine        String     @db.String()
  instructions   String     @db.String()
  recipe_picture String     @db.String()
  ingredient_id  String[]   @db.String()
  category_id    String     @db.String()
  video_id       String     @unique @db.String()
  created_at     DateTime   @default(now())
  updated_at     DateTime   @updatedAt()
  favorites      Favorite[]

  ingredients   Ingredient[] @relation(fields: [ingredient_id], references: [id])
  category      Category     @relation(fields: [category_id], references: [id])
  video         Video        @relation(fields: [video_id], references: [id])
  groceries     Grocery[]
  mealPlanItems MealPlanItem[]

  @@map("recipes")
}

model Favorite {
  id         String   @id @map("_id") @db.String()
  user_id    String   @db.String()
  recipe_id  String   @db.String()
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt()

  user   User   @relation(fields: [user_id], references: [id])
  recipe Recipe @relation(fields: [recipe_id], references: [id])

  @@map("favorites")
}

model Grocery {
  id         String   @id @map("_id") @db.String()
  user_id    String   @db.String()
  recipe_id  String   @db.String()
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt()

  user   User   @relation(fields: [user_id], references: [id])
  recipe Recipe @relation(fields: [recipe_id], references: [id])

  @@map("groceries")
}

model MealPlan {
  id            String   @id @map("_id") @db.String()
  user_id       String   @db.String()
  created_at    DateTime @default(now())
  updated_at    DateTime @updatedAt()
  mealPlanItems MealPlanItem[] 

  user   User   @relation(fields: [user_id], references: [id])

  @@map("mealPlans")
}

model MealPlanItem {
  id          String   @id @map("_id") @db.String()
  mealPlan_id String   @db.String()
  recipe_id   String   @db.String()
  meal_type   String   @db.String()
  day_of_week String   @db.String()

  recipe    Recipe   @relation(fields: [recipe_id], references: [id])
  mealPlan  MealPlan @relation(fields: [mealPlan_id], references: [id])

  @@map("mealPlanItems")
}